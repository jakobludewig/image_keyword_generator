import pandas as pd
import ast

from typing import List

import matplotlib.pyplot as plt

from PIL.Image import Image as PILImage
from PIL import ImageOps, Image


def read_imagenet_labels() -> pd.DataFrame:
    """ Read in imagenet labels, taken from https://gist.github.com/yrevar/942d3a0ac09ec9e5eb3a#file-imagenet1000_clsidx_to_labels-txt
    
    Returns:
        pd.DataFrame: DataFrame containing the labels assigned to each image file
    """
    with open("imagenet1000_labels.txt", "r") as f:
        s = f.read()
        imagenet_labels = ast.literal_eval(s)

    imagenet_labels = pd.DataFrame(
        {"label": imagenet_labels.keys(), "label_text": imagenet_labels.values()}
    )
    return imagenet_labels


def query_image_labels(database: pd.DataFrame, filenames: List[str]) -> List[dict]:
    """Read in the tags associated with a given list of image files from the keyword database

    Args:
        database (pd.DataFrame): The keyword database generated by the build_keyword_database CLI program
        filenames (List[str]): List of image filenames for which to look up the keywords

    Returns:
        List[dict]: List of dictionaries which contain the image filename and the assigned keywords
    """
    images_dict = [
        {
            "filename": f,
            "labels": database[database.filename.isin([f])][["label_text", "prob"]]
            .set_index("label_text")
            .to_dict()["prob"],
        }
        for f in filenames
    ]
    return images_dict


def transform_image(image: PILImage, target_width: int = 400) -> PILImage:
    """ Transforms a given PILImage to make it suitable for plotting.

    Args:
        image (PILImage): PILImage to transform
        target_width (int, optional): The target width of the transformed image, will preserve aspect ratio. Defaults to 400.

    Returns:
        PILImage: Transformed PILImage
    """

    # filename attribute gets lost during transformations so we have to re-assign it afterwards
    filename = image.filename

    scaling_factor = target_width / image._size[0]

    image = image.resize(
        size=(
            round(image._size[0] * scaling_factor),
            round(image._size[1] * scaling_factor),
        )
    )

    image = ImageOps.exif_transpose(image)
    image.filename = filename
    return image


def load_images_and_labels(database: pd.DataFrame, filenames: List[str]) -> List[dict]:
    """ Loads the specified images and the associated labels from the keyword database into a list of dictionaries

    Args:
        database (pd.DataFrame): The keyword database generated by the build_keyword_database CLI program
        filenames (List[str]):  List of image filenames to load

    Returns:
        List[dict]: List of dictionaries containing the images and their associated labels from the keyword database
    """

    images_dict = query_image_labels(database, filenames)

    images_dict = [
        {**i, "image": transform_image(Image.open(i["filename"]))} for i in images_dict
    ]

    return images_dict


def query_top_images_for_label(
    database: pd.DataFrame, label: str, n: int = 5
) -> List[str]:
    """ Query the keyword database for the top n images for a given label.

    Args:
        database (pd.DataFrame): The keyword database generated by the build_keyword_database CLI program
        label (str): The label for which to query the database
        n (int, optional): The number of images to return for the given label. Defaults to 5.

    Returns:
        List[str]: List containing the filenames of the top n images for the specified label
    """
    top_images_label = (
        database[database["label_text"] == label]
        .sort_values("prob", ascending=False)
        .head(n)
    )
    return top_images_label.filename.tolist()


def load_top_n_images_for_label(
    database: pd.DataFrame, label: str, n: int = 5
) -> List[dict]:
    """ Loads top n images and labels for a specified label

    Args:
        database (pd.DataFrame): The keyword database generated by the build_keyword_database CLI program
        label (str): The label for which to query the database
        n (int, optional): The number of images to return for the given label. Defaults to 5.

    Returns:
        List[dict]: List of dictionaries containing the images and their associated labels from the keyword database
    """
    return load_images_and_labels(
        database, query_top_images_for_label(database, label, n),
    )


def plot_image_with_labels(
    image: PILImage, labels: dict, full_path: bool = True
) -> None:
    """ Plot an image alongside its associated labels

    Args:
        image (PILImage): The image to plot
        labels (dict): Dictionary containing the labels with their predicted probability
        full_path (bool): Flag indicating whether the full path or just the filename should be displayed. Defaults to True
    """
    fig = plt.figure(figsize=(16, 12))
    ax1 = fig.add_subplot(1, 6, (1, 4))
    ax1.set_axis_off()
    ax1.imshow(image)

    ax2 = fig.add_subplot(1, 6, (5, 6))
    if full_path:
        labels_text = "File: " + image.filename + "\n"
    else:
        labels_text = "File: " + "[...]/" + image.filename.split("/")[-1] + "\n"
    labels_text = labels_text + "\n".join(
        [k + ": " + str(round(100 * v, 1)) + " %" for k, v in labels.items()]
    )
    ax2.set_axis_off()
    ax2.text(0, 0.5, labels_text, fontsize=16)


def plot_all_images_in_dict(images_dict: dict, full_path: bool = True) -> None:
    """ Plot all images and their associated labels in the specified dictionary

    Args:
        images_dict (dict): Dictionary containing the images and their associated labels
        full_path (bool): Flag indicating whether the full path or just the filename should be displayed. Defaults to True
    """
    for img in images_dict:
        plot_image_with_labels(img["image"], img["labels"], full_path)


def plot_top_n_images_for_label(database: pd.DataFrame, label: str, n: int = 5) -> None:
    """ Plots top n images and labels for a specified label

    Args:
        database (pd.DataFrame): The keyword database generated by the build_keyword_database CLI program
        label (str): The label for which to query the database
        n (int, optional): The number of images to return for the given label. Defaults to 5.

    """
    plot_all_images_in_dict(
        load_images_and_labels(
            database, query_top_images_for_label(database, label, n),
        )
    )


def plot_all_images_by_filename(database: pd.DataFrame, filenames: List[str]) -> None:
    """[summary]

    Args:
        database (pd.DataFrame): [description]
        filenames (List[str]): [description]
    """
    plot_all_images_in_dict(load_images_and_labels(database, filenames))

